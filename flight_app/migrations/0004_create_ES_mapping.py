# Generated by Django 4.0.1 on 2022-02-01 11:17

from django.db import migrations
from elasticsearch import Elasticsearch

from django.conf import settings


def create_ES_mapping(apps, schema_editor):

    es = Elasticsearch(hosts=settings.ELASTIC_HOST)

    index_mapping = {
        "settings": {
            "number_of_shards": 3,
            "number_of_replicas": 1
        },
        "mappings": {
            "dynamic": "false",  # maybe strict
            "properties": {
                "name": {"type": "text"},
                "last_update": {"type": "date", "format": "yyyy-MM-dd"},
                "schedule_date_time": {"type": "date", "format": "yyyy-MM-dd"},
                "actual_landing_time": {"type": "date", "format": "yyyy-MM-dd", "null_value": "NULL"},
                "actual_off_time": {"type": "date", "format": "yyyy-MM-dd", "null_value": "NULL"},
                "expected_boarding_time": {"type": "date", "format": "yyyy-MM-dd", "null_value": "NULL"},
                "estimate_landing_time": {"type": "date", "format": "yyyy-MM-dd", "null_value": "NULL"},
                "airline": {
                    "properties": {
                        "code": {"type": "integer"},
                        "ICAO": {"type": "text"},
                        "IATA": {"type": "text"}
                    }
                },
                "aircraft": {
                    "properties": {
                        "type": {"type": "text"},
                        "registration": {"type": "text"}
                    }
                },
                "status": {
                    "type": "nested",
                    "properties": {
                        "name": {"type": "text"}
                    }
                },
                "airport": {
                    "type": "nested",
                    "properties": {
                        "name": {"type": "text"},
                        "from_to_marker": {"type": "text"}
                    }
                }
            }
        }
    }

    # create index
    es.indices.create(index="flights", ignore=400, body=index_mapping)


class Migration(migrations.Migration):

    dependencies = [
        ('flight_app', '0003_add_airport_Schiphol'),
    ]

    operations = [
        migrations.RunPython(create_ES_mapping),
    ]
